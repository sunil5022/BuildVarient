plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.example.buildvarient'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.buildvarient"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix '1'
              signingConfig signingConfigs.debug

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    flavorDimensions 'PROFILE'
    productFlavors {
        dev {
            dimension "PROFILE"
            versionNameSuffix ".dev"
            applicationId "com.example.buildvarient.dev"
            manifestPlaceholders = [appLabel : "MyDevBuild"]
            getProps('./config/dev.props').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }
        qa {
            dimension "PROFILE"
            versionNameSuffix ".qa"
            applicationId "com.example.buildvarient.qa"
            manifestPlaceholders = [appLabel : "MyQaBuild"]
            getProps('./config/qa.props').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }
        product {
            dimension "PROFILE"
            versionNameSuffix ".qa"
            applicationId "com.example.buildvarient.product"
            manifestPlaceholders = [appLabel : "MyProductBuild"]
            getProps('./config/qa.props').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name

        if ((names.contains("dev") || names.contains("qa")) && variant.buildType.name == "release") {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }
}


def getProps(path) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(path)))
    return props
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

}